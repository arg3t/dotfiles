# Basic Settings
set previewer lf-ueberzug-previewer
set cleaner lf-ueberzug-cleaner
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true

# Custom Functions
cmd open ${{
    echo "$fx" > /tmp/b
    case $fx in
        *.py|*.java|*.json|*.h|*.c|*.cpp|*.js) $EDITOR "$f";;
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            echo $mntdir > /tmp/a
            [ ! -d "$mntdir" ] && {
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        *)
            for f in $fx; do
                $OPENER $f > /dev/null 2> /dev/null &
            done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
  cd $and
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd trash %trash-put $fx

cmd setwallpaper ${{
  echo "$fx" > /tmp/c
  echo convert "$fx" "$HOME/.local/backgrounds/wall.jpg" > /tmp/d
  convert "$fx" "$HOME/.local/backgrounds/wall.jpg"
  feh --bg-fill "$HOME/.local/backgrounds/wall.jpg"
}}

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd cd_jump ${{
  printf "Keyword: "
  read ans
  lf -remote "send $id cd $ans"
}}

cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    GIT_PS1_COMPRESSSPARSESTATE=auto
    git=$(__git_ps1 " [GIT BRANCH:> %s]") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd open ${{
    case "$f" in
    esac
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty
cmd trash %trash-put $fx

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Old keybinds cleanup
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map e $$EDITOR "$f"
map u xdg-open "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map tt trash
map tc clear_trash
map tr restore_trash

map ss stripspace

# Basic Functions
map . set hidden!
map D delete
map p paste
map dd cut
map y copy
map <enter> open
map mf mkfile
map md mkdir
map ch chmod
map bg setwallpaper
map o open_config
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

map cd cd_jump
map cf fzf_jump

# Git Mappings
map gib :git_branch
map gip ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gis ${{clear; git status; echo "press ENTER"; read ENTER}}
map gil ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

# Movement
map ~ cd ~
map g/ cd /
map gm cd /media
map gd cd ~/.dotfiles
map gc cd ~/.config
map gs cd ~/.local/share/bin

