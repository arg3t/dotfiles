#!/bin/bash

source ~/.config/config.env

weatherreport="${XDG_CACHE_HOME:-$HOME/.local/share}/weatherreport"
weatherreportjson="${XDG_CACHE_HOME:-$HOME/.local/share}/weatherreportjson"

WCODES=(
    ["113"]="#ebcb8b "
    ["116"]="#ebcb8b "
    ["119"]="#ffffff 󰖐"
    ["122"]="#ffffff "
    ["143"]="#ffffff "
    ["176"]="#81a1c1 "
    ["179"]="#81a1c1 "
    ["182"]="#81a1c1 "
    ["185"]="#81a1c1 "
    ["200"]="#81a1c1 "
    ["227"]="#ffffff "
    ["230"]="#ffffff "
    ["248"]="#ffffff "
    ["260"]="#ffffff "
    ["263"]="#81a1c1 "
    ["266"]="#81a1c1 "
    ["281"]="#81a1c1 "
    ["284"]="#81a1c1 "
    ["293"]="#81a1c1 "
    ["296"]="#81a1c1 "
    ["299"]="#81a1c1 "
    ["302"]="#81a1c1 "
    ["305"]="#81a1c1 "
    ["308"]="#81a1c1 "
    ["311"]="#81a1c1 "
    ["314"]="#81a1c1 "
    ["317"]="#81a1c1 "
    ["320"]="#ffffff "
    ["323"]="#81a1c1 "
    ["326"]="#81a1c1 "
    ["329"]="#ffffff "
    ["332"]="#ffffff "
    ["335"]="#81a1c1 "
    ["338"]="#ffffff "
    ["350"]="#81a1c1 "
    ["353"]="#81a1c1 "
    ["356"]="#81a1c1 "
    ["359"]="#81a1c1 "
    ["362"]="#81a1c1 "
    ["365"]="#81a1c1 "
    ["368"]="#81a1c1 "
    ["371"]="#81a1c1 "
    ["374"]="#81a1c1 "
    ["377"]="#81a1c1 "
    ["386"]="#81a1c1 "
    ["389"]="#81a1c1 "
    ["392"]="#81a1c1 "
    ["395"]="#81a1c1 "
)

getforecast() { curl -sf "wttr.in/$LOCATION" > "$weatherreport" || exit 1 ;}
getforecastjson() { curl -sf "wttr.in/$LOCATION?format=j1" > "$weatherreportjson" || exit 1 ;}

# Some very particular and terse stream manipulation. We get the maximum
# precipitation chance and the daily high and low from the downloaded file and
# display them with coresponding emojis.
showweather() {
    data=$(jq -r ".current_condition.[0]|.FeelsLikeC,.humidity,.windspeedKmph,.weatherCode" "$weatherreportjson")
    data=$(echo -ne $(echo $data | cut -d' ' -f 1-3)" ${WCODES[$(echo $data | cut -d' ' -f 4)]}")
    echo $data | awk -F' ' '{
		if ($4 > 30)
			printf "<span color=\"#ffffff\"></span> " $3 "kh <span color=\""$4 "\">" $5 "</span> " $1 "°C"
		else
			printf "<span color=\"#81a1c1\"></span> " $2  "% <span color=\""$4 "\">" $5 "</span> " $1 "°C"}'
}

case $BLOCK_BUTTON in
	1) setsid -f st -c weather -n weather -e less -Srf "$weatherreport" ;;
	2) getforecast && showweather && kill -50 $(pidof dwmblocks) ;;
	3) notify-send " Weather module" "\- Left click for full forecast.
- Middle click to update forecast.
: Chance of rain/snow
ﰕ: Daily low
滛: Daily high" ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# The test if our forcecast is updated to the day. If it isn't download a new
# weather report from wttr.in with the above function.
# Also check if the file is empty
[ "$(date -r "$weatherreport" "+%d-%m-%Y %H:%M")" != "$(date '+%d-%m-%Y %H:%M')" ] && getforecast

[ "$(date -r "$weatherreportjson" "+%d-%m-%Y %H:%M")" != "$(date '+%d-%m-%Y %H:%M')" ] && getforecastjson

showweather

if [ $BUIENRADAR ]; then
  buiengraph=$($HOME/.local/bin/status-bar/precipitation.py 6)
  if [ $buiengraph ]; then
    printf " [<span color=\"#81a1c1\">%s</span>]" $buiengraph
  fi
fi

echo -e "\n"
